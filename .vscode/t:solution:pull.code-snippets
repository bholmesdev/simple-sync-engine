{
  "t:solution:pull": {
    "scope": "",
    "prefix": "t:solution:pull",
    "body": [
      "import type { APIRoute } from \"astro\";\nimport { getMutationLog, isLogIdValid } from \"../../lib/server\";\nimport type { mutation } from \"../../queries\";\n\nexport type PullResponse = {\n  flushCount: number;\n  mutations: Array<{\n    clientId: string;\n    mutator: keyof typeof mutation;\n    args: any;\n  }>;\n};\n\nexport const GET: APIRoute = async ({ cookies, url }) => {\n  const lastLogIdCookie = cookies.get(\"lastLogId\");\n  const clientId = url.searchParams.get(\"clientId\");\n  if (!clientId) {\n    return new Response(\"Client ID is required\", { status: 400 });\n  }\n  const lastLogId = lastLogIdCookie?.number();\n  if (lastLogId && !isLogIdValid(lastLogId)) {\n    cookies.delete(\"lastLogId\");\n    return new Response(\"Client is out of date - please reset\", {\n      status: 409,\n    });\n  }\n  const mutations = getMutationLog(lastLogId);\n\n  const flushCount = mutations.filter(\n    (command) => command.clientId === clientId\n  ).length;\n  const latestCommand = mutations.at(-1);\n  if (latestCommand) {\n    cookies.set(\"lastLogId\", latestCommand.id.toString());\n  }\n\n  return new Response(\n    JSON.stringify({ mutations, flushCount } satisfies PullResponse),\n    {\n      status: 200,\n    }\n  );\n};"
    ],
    "description": ""
  }
}